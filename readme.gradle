task generateReadme() {
    doLast {
        new File("$projectDir/README.MD").text = """
<a href="https://bintray.com/beta/#/iamthevoid/maven/$libUploadName"><img src="https://github.com/iamthevoid/media-picker-android/blob/master/lib.svg"></a>


Simple reactive library for pick image or video. There is Rx Java 1 implementation. 
Later will be added Rx Java 2, Rx Java 3, Coroutines implementation.  
  
```kotlin  
 MediaPicker.builder(this)
  .pick(Purpose.Pick.IMAGE, Purpose.Pick.VIDEO)
  .take(Purpose.Take.PHOTO, Purpose.Take.VIDEO)
  .build()
  .subscribe { uri : Uri -> }
```  
  
also transformers provided  

 - file() 
 - filepath() 
 - bitmap()  

Example in rxJava
```kotlin  
mediaPickerObservable
  .compose(file())
  .subscribe { file : File -> }  
```  
  
## WARNING!!!  
Since N needs `fileprovider` for correct saving and using photo. Than you need to do next:  
  
1) Add provider to manifest  
```xml  
 <provider android:name="android.support.v4.content.FileProvider"
  android:authorities="**{name of package of your app}**.fileprovider"
  android:exported="false"
  android:grantUriPermissions="true"> 
    <meta-data 
      android:name="android.support.FILE_PROVIDER_PATHS" 
      android:resource="@xml/**{name of file provider descriptor file}**" /> 
 </provider>
```  
  
2) Add file with **{name of file provider descriptor file}** (for example `my_paths.xml`) in  
`res/xml` folder. Note than in manifest this filename uses without ".xml", just like `@xml/my_paths`  
  
File contains next:  
```xml  
 <paths> 
   <external-path name="my_images" // Any name path="Android/data/**{name of package of your app}**/files/Pictures" /> 
 </paths>
```  
  
## Adding to project  
```groovy  
 allprojects { repositories { maven { url "https://dl.bintray.com/iamthevoid/maven/" } } }
```  
RxJava 1
```groovy  
 implementation "iam.thevoid.mediapicker:rx1:$libVersion"
```

"""
    }
}